# ============================================
# ü©∫ LEITURA DO ARQUIVO CSV DE FORMA SEGURA NO STREAMLIT
# ============================================

# Importamos os m√≥dulos necess√°rios:
# - os ‚Üí para manipular caminhos de arquivos e pastas
# - pandas ‚Üí para ler o CSV e criar o DataFrame
# - streamlit ‚Üí para mostrar mensagens na tela e interromper o app se necess√°rio
import os
import pandas as pd
import streamlit as st

# ============================================
# üîç CONSTRU√á√ÉO DO CAMINHO CORRETO PARA O CSV
# ============================================

# __file__ ‚Üí representa o caminho completo deste arquivo Python (Dashboard.py)
# os.path.dirname(__file__) ‚Üí pega apenas a pasta onde este arquivo est√° salvo
# os.path.join() ‚Üí junta o caminho da pasta + o nome do arquivo 'consultas.csv'
# 
# Exemplo pr√°tico:
# Se o arquivo estiver em:
#   /app/python-bootcamp-exercicios/modulo06-python/codigos-python06aulas/Dashboard.py
# Ent√£o o caminho final do CSV ser√°:
#   /app/python-bootcamp-exercicios/modulo06-python/codigos-python06aulas/consultas.csv
csv_path = os.path.join(os.path.dirname(__file__), "consultas.csv")

# ============================================
# ‚ö†Ô∏è VERIFICA SE O ARQUIVO EXISTE
# ============================================

# Antes de tentar ler, checamos se o arquivo realmente existe.
# Isso evita o erro "FileNotFoundError" e mostra uma mensagem amig√°vel no app.
if not os.path.exists(csv_path):
    # Mostra o erro na interface do Streamlit
    st.error(f"Arquivo '{csv_path}' n√£o encontrado. "
             "Verifique se ele est√° no GitHub e tente recarregar o app.")
    
    # Interrompe a execu√ß√£o do aplicativo para evitar falhas adiante
    st.stop()

# ============================================
# üìñ LEITURA DO ARQUIVO CSV
# ============================================

# Se o arquivo foi encontrado, fazemos a leitura normalmente.
# O par√¢metro 'parse_dates' converte automaticamente a coluna 'dataconsulta'
# em formato de data (datetime) ‚Äî ideal para gr√°ficos e filtros.
df = pd.read_csv(csv_path, parse_dates=['dataconsulta'])

# ============================================
# ‚úÖ PRONTO! O DataFrame 'df' agora est√° carregado com seguran√ßa
# ============================================

# A partir daqui, voc√™ pode continuar o c√≥digo do seu dashboard normalmente:
# Exemplo:
st.success("‚úÖ Arquivo 'consultas.csv' carregado com sucesso!")
st.dataframe(df.head())  # Mostra as primeiras linhas do CSV no Streamlit

# ============================================
# üìò RESUMO DO QUE ESSE TRECHO FAZ
# ============================================
# 1Ô∏è‚É£ Garante que o app sempre encontre o CSV mesmo em subpastas;
# 2Ô∏è‚É£ Funciona no GitHub, no Streamlit Cloud e no seu computador local;
# 3Ô∏è‚É£ Evita travar o app com FileNotFoundError;
# 4Ô∏è‚É£ Mostra mensagens claras para o usu√°rio.



# Combo das datas
# Cria uma lista de datas √∫nicas presentes na coluna 'dataconsulta',
# formatando-as no padr√£o dia-m√™s-ano (ex.: '25-10-25').
# A fun√ß√£o 'sorted()' organiza essas datas em ordem crescente para uso em seletores 
# (ex.: menus ou filtros de data no Streamlit).
datas_unicas = sorted(df['dataconsulta'].dt.strftime('%d-%m-%y').unique())
opcao_data = st.sidebar.selectbox('Selecione a data: ', options=['Todas'] + datas_unicas)


# Combo das unidades
unidades = sorted(df['unidade'].unique())
opcao_unidade = st.sidebar.selectbox('Selecione uma unidade: ', options=['Todas'] + unidades)


# fazendo uma c√≥pia do dataframe
df_filtrado = df.copy()

# Aplicando filtros
if opcao_data != 'Todas':
    df_filtrado = df_filtrado[df_filtrado['dataconsulta'].dt.strftime('%d-%m-%y') == opcao_data]

if opcao_unidade != 'Todas':
    df_filtrado = df_filtrado[df_filtrado['unidade'] == opcao_unidade]


# ===============================
# Composi√ß√£o dos Gr√°ficos
# ===============================

# Define o t√≠tulo principal do dashboard dentro do Streamlit
# Este t√≠tulo aparece no topo da p√°gina web.
st.title('üìä Painel de Consultas M√©dicas')

# ===============================================================
# Gr√°fico 1 - N√∫mero de Consultas por Unidade
# ===============================================================

# Agrupa o DataFrame filtrado pela coluna 'unidade' e conta quantas linhas h√° em cada grupo.
# Explica√ß√£o passo a passo:
# 1 df_filtrado.groupby('unidade')   ‚Üí agrupa as linhas com base na unidade (ex.: "Centro", "Vila Nova", etc.)
# 2 .size()                          ‚Üí conta o n√∫mero de ocorr√™ncias (linhas) em cada grupo
# 3 .reset_index(name='Total')       ‚Üí transforma o resultado em um novo DataFrame com duas colunas:
#                                         - 'unidade' ‚Üí nome da unidade
#                                         - 'Total'   ‚Üí n√∫mero total de consultas naquela unidade
consultas_unidade = df_filtrado.groupby('unidade').size().reset_index(name='Total')

# Agora 'consultas_unidade' √© um novo DataFrame que pode ser usado para gerar o gr√°fico.
# Exemplo de estrutura:
#   unidade        Total
#   -----------    -----
#   Centro          120
#   Vila Nova        85
#   Jardim Santos    47

# criando duas colunas para o gr√°fico
col1, col2 = st.columns(2)

# =========================================================================
# montagem do Gr√°fico 1 - N√∫mero de Consultas por Unidade
fig1 = px.bar(consultas_unidade,
              x='unidade',
              y='Total',
              color='unidade',
              title=f'Numero de Consultas por Unidades ({opcao_data})',
              text='Total'

              )


# fazendo um update de layout
fig1.update_layout(xaxis_title='Unidade', # trocando o nome do eixo X
                   yaxis_title='Total de Consultas')# trocando o nome do eixo Y

# chamando o gr√°fico
col1.plotly_chart(fig1, use_container_width=True)
# =========================================================================


consultas_tipo = df_filtrado.groupby('tipoconsulta').size().reset_index(name='Total')

# =========================================================================
# montagem do gr√°fico 2 consulta por especialidade
fig2 = px.bar(consultas_tipo,
              x='Total',
              y='tipoconsulta',
              color='tipoconsulta',
              title=f'Consultas por Especialidade ({opcao_data})',
              text='Total'

              )


# fazendo um update de layout
fig2.update_layout(xaxis_title='Total de consulta', # trocando o nome do eixo X
                   yaxis_title='Tipo da Consulta')# trocando o nome do eixo Y

# chamando o gr√°fico
col2.plotly_chart(fig2, use_container_width=True)
# =========================================================================

# Vis√£o dos atendimentos

# criando um cabe√ßalho
st.subheader(f'üìã Registros: ({opcao_unidade})')
st.dataframe(df_filtrado, use_container_width=True)




# ===============================
# Configura√ß√£o e exibi√ß√£o no Streamlit
# ===============================

# Define configura√ß√µes iniciais da p√°gina do aplicativo Streamlit:
# - T√≠tulo da aba do navegador
# - Layout "wide" para ocupar toda a largura da tela
st.set_page_config(page_title='Painel de Consultas M√©dicas', layout='wide')

# Define o t√≠tulo que aparecer√° no topo do dashboard
st.title('Meu primeiro Dashboard')




# Exibe o DataFrame (tabela) na p√°gina web do Streamlit
df

# Exibe o DataFrame (tabela) na p√°gina web do Streamlit
print(df)

# Demandas do cliente
# 1 - N√∫mero de consultas geral e por datas (selectbox) - Barras
# 2 - Por unidade as consultas - dados -Especialidades


# ===============================
# Execu√ß√£o do aplicativo Streamlit
# ===============================
# Para rodar o aplicativo, execute no terminal o comando abaixo:
# streamlit run dashboard_streamlit.py


# ===============================
# Configura√ß√£o e exibi√ß√£o no Streamlit
# ===============================

# Define configura√ß√µes iniciais da p√°gina do aplicativo Streamlit:
# - T√≠tulo da aba do navegador
# - Layout "wide" para ocupar toda a largura da tela
st.set_page_config(page_title='Painel de Consultas M√©dicas', layout='wide')

# Define o t√≠tulo que aparecer√° no topo do dashboard


# Exibe o DataFrame (tabela) na p√°gina web do Streamlit
df


# Demandas do cliente
# 1 - N√∫mero de consultas geral e por datas (selectbox) - Barras
# 2 - Por unidade as consultas - dados -Especialidades
 

# ===============================
# Execu√ß√£o do aplicativo Streamlit
# ===============================
# Para rodar o aplicativo, execute no terminal o comando abaixo:
# streamlit run Dashboard.py
