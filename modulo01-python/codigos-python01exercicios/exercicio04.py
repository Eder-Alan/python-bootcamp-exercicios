# - Qual o resultado da express√£o 10 + 6 * 2?
# Explique a ordem das opera√ß√µes.

print(f'O resultado de: 10 + 6 * 2 √© {10 + 6 * 2}')
print(f'e o resultado de (10 + 6) * 2 {(10 + 6) * 2}')

# isto √© chamdo de oredem de precedencia regras de precedencia:
# neste caso a ordem das opera√ß√µes √© primeiro a multiplica√ß√£o de
# depois a soma para que funcione corretamente devemos adicionar
# um par de parentese entre os n√∫meros (10 + 6) e desta forma
# ser√° feita a opera√ß√£o corretamente
# oredem de precendencia dos operadores aritim√©ticos sempre da
# esquerda para a direita
#
# N√≠vel	Operador	Descri√ß√£o	                Ordem
# 1Ô∏è‚É£	    ( )	         Par√™nteses ‚Äì resolvem primeiro	Maior
# 2Ô∏è‚É£	** ou ^ (dependendo da linguagem)	Pot√™ncia/Exponencia√ß√£o	Esquerda ‚Üí Direita (ou Direita ‚Üí Esquerda, depende da linguagem)
# 3Ô∏è‚É£	*, /, %	Multiplica√ß√£o, Divis√£o, Resto da divis√£o	Esquerda ‚Üí Direita
# 4Ô∏è‚É£	+, -	Adi√ß√£o e Subtra√ß√£o	Esquerda ‚Üí Direita
# üîΩ		(outros operadores j√° n√£o s√£o aritm√©ticos)	Menor
#
#
#
# Nos operadores l√≥gicos a ordem de preced√™ncia tamb√©m segue uma hierarquia, que pode variar levemente conforme a linguagem, mas na maioria (C, Java, Python, JavaScript) fica assim:
#
# N√≠vel	Operador	Descri√ß√£o	Ordem
# 1Ô∏è‚É£	! (C/Java/JS) ou not (Python)	Nega√ß√£o l√≥gica (inverte o valor)	Maior
# 2Ô∏è‚É£	&& (C/Java/JS) ou and (Python)	Conjun√ß√£o l√≥gica (E)	Esquerda ‚Üí Direita
# 3Ô∏è‚É£	`		(C/Java/JS) ou or` (Python).

# ============ com melhorias
# Programa para demonstrar ordem de preced√™ncia em express√µes matem√°ticas

print(f'O resultado de 10 + 6 * 2 √©: {10 + 6 * 2}')
print(f'O resultado de (10 + 6) * 2 √©: {(10 + 6) * 2}')

# Explica√ß√£o:
# Sem par√™nteses -> primeiro a multiplica√ß√£o, depois a soma:
# 10 + 6 * 2
# 10 + 12 = 22
#
# Com par√™nteses -> primeiro resolve o que est√° dentro deles:
# (10 + 6) * 2
# 16 * 2 = 32

# Ordem de preced√™ncia dos operadores aritm√©ticos no Python:
# 1Ô∏è‚É£ ( )    -> Par√™nteses (maior prioridade)
# 2Ô∏è‚É£ **     -> Pot√™ncia
# 3Ô∏è‚É£ *, /, //, % -> Multiplica√ß√£o, divis√£o, divis√£o inteira e resto
# 4Ô∏è‚É£ +, -   -> Adi√ß√£o e subtra√ß√£o

# Nos operadores l√≥gicos:
# 1Ô∏è‚É£ not  -> Nega√ß√£o l√≥gica
# 2Ô∏è‚É£ and  -> E l√≥gico
# 3Ô∏è‚É£ or   -> OU l√≥gico
