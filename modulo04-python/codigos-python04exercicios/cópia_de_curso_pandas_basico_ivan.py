# -*- coding: utf-8 -*-
"""Cópia de Curso_Pandas_Basico_Ivan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aKrKg8uYdxNmHDao6O651ikmQIdeLJvZ

## **Lendo os dados**
"""

import pandas as pd

origem = 'https://raw.githubusercontent.com/ivansanchespetrucci/python-pandas/refs/heads/main/base_automoveis.csv'
dados = pd.read_csv(origem) # abrindo o arquivo e adicionando o conteudo dentro da var dados
dados

dados.head() # é mostrado os 5 primeiros registros
dados.tail() # é mostrado os 5 ultimos registros
dados.head(15) # caso eu queira ver os ultimos 15 primeiros basta fazer assim

"""## **Tipos de dados**


"""

type(dados) # é utilizado para informar os tipos de dados que tenho neste arquivo.

dados.shape # método que nos informa a composição do nosso arquivo e neste caso nosso arquivo é composto por 100 linhas e 4 colunas.

# identificando quem são estas colunas, posso associar isto a uma variável e trabalhar como uma lista
dados.columns

# fazendo um teste.
colunas = dados.columns
# printe na tela da segunda coluna
print(colunas[1])

# printe de todas as colunas, posso utilizar a técnica de fatiamento.
print(colunas[::])

# iremos mostrar as informações de cada coluna
dados.info()

"""## **Explorar os dados**"""

# como explorar o valor de cada coluna.
dados['montadora']
# além disso é totalmente possível passar mais de um campo acompanhe:
print(dados[['montadora', 'modelo']])

# e na ordem que eu desejar:
print(dados[['modelo', 'valor_mercado']])

"""## **Analise dos dados (EDA)**"""

# como conseguir a média da base de dados, valor médio de todos os carros
dados['valor_mercado'].mean()
media = dados['valor_mercado'].mean()
print(f"R${media:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

# somando por grupos de carros
# com o método .mean(numeric_only=True) ele fará a média de todos os
# valores numéricos inclusive os que não interessa que são os anos.
media1 = dados.groupby('montadora').mean(numeric_only=True)
media1

# agora quero apenas os de valores de mercado.
media1 = dados.groupby('montadora')['valor_mercado'].mean(numeric_only=True)
media1

# colocando de forma ordenada.
media1 = dados.groupby('montadora')[['valor_mercado']].mean(numeric_only=True).sort_values('valor_mercado')
media1

# e caso eu queira do maior para o menor basta fazer assim:
# colocando de forma ordenada.
media1 = dados.groupby('montadora')[['valor_mercado']].mean(numeric_only=True).sort_values('valor_mercado', ascending=False)
media1

# iremos gerar um gráfico
dados_montadora = dados.groupby('montadora')[['valor_mercado']].mean(numeric_only=True).sort_values('valor_mercado', ascending=False)
dados_montadora.plot(kind= 'barh', figsize=(10,5), color='red')

# para saber o percentual temos de contar os elementos
elementomont = dados.montadora.value_counts()
elementomont

# posso gera um outro gráfico com esta informações
elementomont.plot(kind= 'barh', figsize=(10,5), color='blue')

# para saber o percentual temos de contar os elementos
elementomont = dados.montadora.value_counts(normalize=True)
elementomont

"""## **Valores NULOS**"""

# verificar se existe valores nulos, mas não podemos confiar nesta visualização
dados.isnull()

# aqui temos uma forma mais eficiente de visualizar
dados.isnull().sum()

# já verificamos que existem nulos temos agora de tratar
dados = dados.fillna(0)

# aqui temos uma forma mais eficiente de visualizar
dados.isnull().sum()

"""## **Aplicar Filtros**"""

# passar os valores que tenho sem reptição
dados.montadora.unique()

# separando por montadoras
filtro = ['Toyota', 'Honda', 'Ford']

# é possivel fazer filtros desta forma de apenas uma montadora
dados.query('montadora == "Ford"')

# abaixo como filtrar em grupo
dados.query('@filtro in montadora')

# é também possível um filtro dos que não foram selecionados de maneira bem simples
dados.query('@filtro not in montadora')

# aplicando um gráfico
dados_pesq = dados.query('@filtro in montadora')


dados_montadora = dados_pesq.groupby('montadora')[['valor_mercado']].mean(numeric_only=True).sort_values('valor_mercado')
dados_montadora.plot(kind= 'barh', figsize=(10,5), color='red')

elementomont = dados_pesq.montadora.value_counts(normalize=True)
elementomont

"""# **Filtro1-ANO**"""

# aplicando filtros por ano
dados_filtro_ano = dados_pesq['ano_fabricacao'] > 2020
dados_pesq[dados_filtro_ano]

"""# **Filtro2-VALOR**"""

# aplicando filtros por valor
dados_filtro_valor = dados_pesq['valor_mercado'] >= 30000
dados_pesq[dados_filtro_valor]

# a combinação de dois filtros.
dados_filtro_final = (dados_filtro_ano) & (dados_filtro_valor)
dados_pesq[dados_filtro_final]

# uma outra forma de fazer.
selecao = dados_pesq.query('ano_fabricacao > 2020 and valor_mercado >= 30000')
selecao

"""## **Salvar os dados**"""

# como salvar os dados
# retirando o Unnamed
# mudando para ponto e virgula o separador
selecao.to_csv('pesq_claudio.csv')

# fazendo a leitura do arquivo
pd.read_csv('pesq_claudio.csv')